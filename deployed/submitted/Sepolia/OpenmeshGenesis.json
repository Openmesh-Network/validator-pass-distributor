{
  "type": "deployment",
  "id": "OpenmeshGenesis",
  "batch": "Sepolia",
  "batchIndex": 1,
  "deploymentAddress": "0x514F36116D7b556D7B36A45Eef05FACE39994c8C",
  "constructorArgs": [
    "0x0617ca3B9b621ba854439ec5F4329EB0e9Df6c38",
    [
      { "mintCount": "1", "price": "500000000" },
      { "mintCount": "2", "price": "1000000000" },
      { "mintCount": "3", "price": "1500000000" },
      { "mintCount": "4", "price": "2000000000" }
    ],
    1715126400,
    "0xba1872253c7519232843b5a162f2892aa0117d55f10376955554838e892214a4"
  ],
  "to": "0x4e59b44847b379578588920ca78fbf26c0b4956c",
  "value": "0",
  "data": "0x0000000000000000000000000000000000000000000000004f50454e4d455348604060e08152346101cf57610a1c8038038061001a81610209565b9283398101906080818303126101cf578051916001600160a01b03831683036101cf576020828101519091906001600160401b03908181116101cf5784019180601f840112156101cf578251928284116101bb5761007c858560051b01610209565b928584868152019186839660061b820101938085116101cf5792908701925b8484106101d3575050505050858401519363ffffffff851685036101cf57606001519460805251916801000000000000000083116101bb576002918254848455808510610159575b5090825f52805f205f925b85841061013b5788888860a05260c052516107ed908161022f823960805181818161031b01526106a4015260a0518181816101fd0152610502015260c0518181816102e401526105fd0152f35b848382816001945180518755015184860155019201930192906100ee565b60016001600160ff1b0382811683036101a757861686036101a757845f5284845f209260011b8301928760011b015b838110610197575050506100e3565b5f81555f83820155018590610188565b634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b8a848203126101cf578a518b8101818110858211176101bb578c528451815284890151898201528252928a01929087019061009b565b6040519190601f01601f191682016001600160401b038111838210176101bb5760405256fe608060409080825260049081361015610016575f80fd5b5f3560e01c908163205b1946146103605750806326092b831461034a5780632b971f1514610307578063386bfc98146102cd578063493b4ffc1461026c5780635b980628146102215780635e403472146101e15780638da5cb5b146101b35780639261e60f1461018e5780639659867e14610170578063d08b44751461010f578063eb91d37e146100ec5763fddd26de146100af575f80fd5b346100e85760203660031901126100e857356002548110156100e8576100d49061044c565b506001815491015482519182526020820152f35b5f80fd5b82346100e8575f3660031901126100e857602090610108610637565b9051908152f35b5090346100e85760603660031901126100e85761012a610399565b916024359067ffffffffffffffff82116100e85761014a913691016103e5565b9160443563ffffffff811681036100e85760209361016792610527565b90519015158152f35b82346100e8575f3660031901126100e8576020906001549051908152f35b82346100e85760203660031901126100e8576020906101676101ae610399565b6104d7565b82346100e8575f3660031901126100e8576020905173af7e68bcb2fc7295492a00177f14f59b92814e708152f35b82346100e8575f3660031901126100e8576020905163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5090346100e8575f3660031901126100e8575f8080804773af7e68bcb2fc7295492a00177f14f59b92814e705af1610257610498565b501561025f57005b51635671523f60e11b8152fd5b5090806003193601126100e857813567ffffffffffffffff81116100e85761029790369084016103e5565b60243563ffffffff811681036100e8576102b19133610527565b156102c0576102be610688565b005b51631eb49d6d60e11b8152fd5b82346100e8575f3660031901126100e857602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b82346100e8575f3660031901126100e857517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50905f3660031901126100e8576102b1336104d7565b8390346100e85760203660031901126100e85760209160ff906001600160a01b03610389610399565b165f525f84525f20541615158152f35b600435906001600160a01b03821682036100e857565b90601f8019910116810190811067ffffffffffffffff8211176103d157604052565b634e487b7160e01b5f52604160045260245ffd5b81601f820112156100e85780359160209167ffffffffffffffff84116103d1578360051b906040519461041a858401876103af565b855283808601928201019283116100e8578301905b82821061043d575050505090565b8135815290830190830161042f565b6002548110156104845760025f5260011b7f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01905f90565b634e487b7160e01b5f52603260045260245ffd5b3d156104d2573d9067ffffffffffffffff82116103d157604051916104c7601f8201601f1916602001846103af565b82523d5f602084013e565b606090565b6001600160a01b03165f9081526020819052604090205460ff1615806104fa5790565b5063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016421190565b60018060a01b031691825f5260205f815260409160ff835f205416159485610627575b85610558575b505050505090565b9091929395945063ffffffff8451928484019283521684830152838252606082019067ffffffffffffffff90838310828411176103d15782865283519020608084019081528483529260a001908111828210176103d1578452519020905f915b85518310156105f557818360051b87010151908181105f146105e6575f5281526001835f205b9201916105b8565b905f5281526001835f206105de565b9394505050507f0000000000000000000000000000000000000000000000000000000000000000145f80808080610550565b63ffffffff82164211955061054a565b600254600180549092905f5b83811061065c576040516333fb675360e21b8152600490fd5b6106658161044c565b50548210610674578401610643565b90506106829193925061044c565b50015490565b610690610637565b803410610799575f90348103610768575b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b156100e8575f8060409260248451809481936335313c2160e11b83523360048401525af1801561075e57610742575b50807f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885923381528060205220600160ff198254161790558051338152346020820152a1565b915067ffffffffffffffff82116103d1579081525f90806106fd565b82513d5f823e3d90fd5b5f80808093349003335af161077b610498565b5015610787575f6106a1565b604051635671523f60e11b8152600490fd5b6044906040519063850615e560e01b82523460048301526024820152fdfea264697066735822122052b8acc0d73229048cd83ea9f1c1481523930641a292dac4f4c8bd7d8521174464736f6c634300081700330000000000000000000000000617ca3b9b621ba854439ec5f4329eb0e9df6c38000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000663ac080ba1872253c7519232843b5a162f2892aa0117d55f10376955554838e892214a400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000001dcd65000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000059682f0000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000077359400",
  "gas": "712576",
  "from": "0xaF7E68bCb2Fc7295492A00177f14F59B92814e70",
  "transactionSettings": {
    "chainId": 11155111,
    "nonce": "246",
    "baseFee": "86195951081",
    "priorityFee": "1000000000"
  },
  "salt": "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000OPENMESH",
  "artifact": {
    "abi": [
      {
        "type": "constructor",
        "inputs": [
          {
            "name": "_validatorPass",
            "type": "address",
            "internalType": "contract IERC721Mintable"
          },
          {
            "name": "_pricePeriods",
            "type": "tuple[]",
            "internalType": "struct IOpenmeshGenesis.PricePeriod[]",
            "components": [
              {
                "name": "mintCount",
                "type": "uint256",
                "internalType": "uint256"
              },
              { "name": "price", "type": "uint256", "internalType": "uint256" }
            ]
          },
          {
            "name": "_publicMintTime",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "_whitelistRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "canPublicMint",
        "inputs": [
          { "name": "_account", "type": "address", "internalType": "address" }
        ],
        "outputs": [
          { "name": "allowed", "type": "bool", "internalType": "bool" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "canWhitelistMint",
        "inputs": [
          { "name": "_account", "type": "address", "internalType": "address" },
          {
            "name": "_proof",
            "type": "bytes32[]",
            "internalType": "bytes32[]"
          },
          { "name": "_mintTime", "type": "uint32", "internalType": "uint32" }
        ],
        "outputs": [
          { "name": "allowed", "type": "bool", "internalType": "bool" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "collectFunds",
        "inputs": [],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "getCurrentPrice",
        "inputs": [],
        "outputs": [
          {
            "name": "currentPrice",
            "type": "uint256",
            "internalType": "uint256"
          }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "hasContributed",
        "inputs": [
          { "name": "account", "type": "address", "internalType": "address" }
        ],
        "outputs": [
          { "name": "contributed", "type": "bool", "internalType": "bool" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "mintCount",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "uint256", "internalType": "uint256" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "owner",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "address", "internalType": "address" }
        ],
        "stateMutability": "pure"
      },
      {
        "type": "function",
        "name": "pricePeriods",
        "inputs": [
          { "name": "", "type": "uint256", "internalType": "uint256" }
        ],
        "outputs": [
          { "name": "mintCount", "type": "uint256", "internalType": "uint256" },
          { "name": "price", "type": "uint256", "internalType": "uint256" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "publicMint",
        "inputs": [],
        "outputs": [],
        "stateMutability": "payable"
      },
      {
        "type": "function",
        "name": "publicMintTime",
        "inputs": [],
        "outputs": [{ "name": "", "type": "uint32", "internalType": "uint32" }],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "validatorPass",
        "inputs": [],
        "outputs": [
          {
            "name": "",
            "type": "address",
            "internalType": "contract IERC721Mintable"
          }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "whitelistMint",
        "inputs": [
          {
            "name": "_proof",
            "type": "bytes32[]",
            "internalType": "bytes32[]"
          },
          { "name": "_mintTime", "type": "uint32", "internalType": "uint32" }
        ],
        "outputs": [],
        "stateMutability": "payable"
      },
      {
        "type": "function",
        "name": "whitelistRoot",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "bytes32", "internalType": "bytes32" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "event",
        "name": "Mint",
        "inputs": [
          {
            "name": "account",
            "type": "address",
            "indexed": false,
            "internalType": "address"
          },
          {
            "name": "paid",
            "type": "uint256",
            "indexed": false,
            "internalType": "uint256"
          }
        ],
        "anonymous": false
      },
      { "type": "error", "name": "MintOver", "inputs": [] },
      { "type": "error", "name": "NotAllowed", "inputs": [] },
      { "type": "error", "name": "TransferReverted", "inputs": [] },
      {
        "type": "error",
        "name": "Underpaying",
        "inputs": [
          { "name": "attached", "type": "uint256", "internalType": "uint256" },
          {
            "name": "minRequired",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      }
    ],
    "bytecode": "0x604060e08152346101cf57610a1c8038038061001a81610209565b9283398101906080818303126101cf578051916001600160a01b03831683036101cf576020828101519091906001600160401b03908181116101cf5784019180601f840112156101cf578251928284116101bb5761007c858560051b01610209565b928584868152019186839660061b820101938085116101cf5792908701925b8484106101d3575050505050858401519363ffffffff851685036101cf57606001519460805251916801000000000000000083116101bb576002918254848455808510610159575b5090825f52805f205f925b85841061013b5788888860a05260c052516107ed908161022f823960805181818161031b01526106a4015260a0518181816101fd0152610502015260c0518181816102e401526105fd0152f35b848382816001945180518755015184860155019201930192906100ee565b60016001600160ff1b0382811683036101a757861686036101a757845f5284845f209260011b8301928760011b015b838110610197575050506100e3565b5f81555f83820155018590610188565b634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b8a848203126101cf578a518b8101818110858211176101bb578c528451815284890151898201528252928a01929087019061009b565b6040519190601f01601f191682016001600160401b038111838210176101bb5760405256fe608060409080825260049081361015610016575f80fd5b5f3560e01c908163205b1946146103605750806326092b831461034a5780632b971f1514610307578063386bfc98146102cd578063493b4ffc1461026c5780635b980628146102215780635e403472146101e15780638da5cb5b146101b35780639261e60f1461018e5780639659867e14610170578063d08b44751461010f578063eb91d37e146100ec5763fddd26de146100af575f80fd5b346100e85760203660031901126100e857356002548110156100e8576100d49061044c565b506001815491015482519182526020820152f35b5f80fd5b82346100e8575f3660031901126100e857602090610108610637565b9051908152f35b5090346100e85760603660031901126100e85761012a610399565b916024359067ffffffffffffffff82116100e85761014a913691016103e5565b9160443563ffffffff811681036100e85760209361016792610527565b90519015158152f35b82346100e8575f3660031901126100e8576020906001549051908152f35b82346100e85760203660031901126100e8576020906101676101ae610399565b6104d7565b82346100e8575f3660031901126100e8576020905173af7e68bcb2fc7295492a00177f14f59b92814e708152f35b82346100e8575f3660031901126100e8576020905163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5090346100e8575f3660031901126100e8575f8080804773af7e68bcb2fc7295492a00177f14f59b92814e705af1610257610498565b501561025f57005b51635671523f60e11b8152fd5b5090806003193601126100e857813567ffffffffffffffff81116100e85761029790369084016103e5565b60243563ffffffff811681036100e8576102b19133610527565b156102c0576102be610688565b005b51631eb49d6d60e11b8152fd5b82346100e8575f3660031901126100e857602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b82346100e8575f3660031901126100e857517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50905f3660031901126100e8576102b1336104d7565b8390346100e85760203660031901126100e85760209160ff906001600160a01b03610389610399565b165f525f84525f20541615158152f35b600435906001600160a01b03821682036100e857565b90601f8019910116810190811067ffffffffffffffff8211176103d157604052565b634e487b7160e01b5f52604160045260245ffd5b81601f820112156100e85780359160209167ffffffffffffffff84116103d1578360051b906040519461041a858401876103af565b855283808601928201019283116100e8578301905b82821061043d575050505090565b8135815290830190830161042f565b6002548110156104845760025f5260011b7f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01905f90565b634e487b7160e01b5f52603260045260245ffd5b3d156104d2573d9067ffffffffffffffff82116103d157604051916104c7601f8201601f1916602001846103af565b82523d5f602084013e565b606090565b6001600160a01b03165f9081526020819052604090205460ff1615806104fa5790565b5063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016421190565b60018060a01b031691825f5260205f815260409160ff835f205416159485610627575b85610558575b505050505090565b9091929395945063ffffffff8451928484019283521684830152838252606082019067ffffffffffffffff90838310828411176103d15782865283519020608084019081528483529260a001908111828210176103d1578452519020905f915b85518310156105f557818360051b87010151908181105f146105e6575f5281526001835f205b9201916105b8565b905f5281526001835f206105de565b9394505050507f0000000000000000000000000000000000000000000000000000000000000000145f80808080610550565b63ffffffff82164211955061054a565b600254600180549092905f5b83811061065c576040516333fb675360e21b8152600490fd5b6106658161044c565b50548210610674578401610643565b90506106829193925061044c565b50015490565b610690610637565b803410610799575f90348103610768575b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b156100e8575f8060409260248451809481936335313c2160e11b83523360048401525af1801561075e57610742575b50807f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885923381528060205220600160ff198254161790558051338152346020820152a1565b915067ffffffffffffffff82116103d1579081525f90806106fd565b82513d5f823e3d90fd5b5f80808093349003335af161077b610498565b5015610787575f6106a1565b604051635671523f60e11b8152600490fd5b6044906040519063850615e560e01b82523460048301526024820152fdfea264697066735822122052b8acc0d73229048cd83ea9f1c1481523930641a292dac4f4c8bd7d8521174464736f6c63430008170033",
    "compiler": { "version": "v0.8.23+commit.f704f362" },
    "contractName": "src/OpenmeshGenesis.sol:OpenmeshGenesis",
    "jsonDescription": {
      "language": "Solidity",
      "sources": {
        "lib/openmesh-admin/lib/ens-reverse-claimable/src/ENSReverseClaimable.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract ENSReverseClaimable {\n    /// @notice ENS reverse name resolution is claimable by the owner of the contract.\n    function owner() external pure virtual returns (address) {\n        return 0x2309762aAcA0a8F689463a42c0A6A84BE3A7ea51; // plopmenz.eth\n    }\n}\n"
        },
        "lib/openmesh-admin/src/Openmesh.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract Openmesh {\n    address constant OPENMESH_ADMIN = 0xaF7E68bCb2Fc7295492A00177f14F59B92814e70;\n}\n"
        },
        "lib/openmesh-admin/src/OpenmeshENSReverseClaimable.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ENSReverseClaimable} from \"../lib/ens-reverse-claimable/src/ENSReverseClaimable.sol\";\nimport {Openmesh} from \"./Openmesh.sol\";\n\ncontract OpenmeshENSReverseClaimable is Openmesh, ENSReverseClaimable {\n    /// @inheritdoc ENSReverseClaimable\n    function owner() external pure override returns (address) {\n        return OPENMESH_ADMIN;\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the Merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     *@dev The multiproof provided is not valid.\n     */\n    error MerkleProofInvalidMultiproof();\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proofLen != totalHashes + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            if (proofPos != proofLen) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proofLen != totalHashes + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            if (proofPos != proofLen) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Sorts the pair (a, b) and hashes the result.\n     */\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        },
        "lib/validator-pass/src/IERC721Mintable.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IERC721Mintable is IERC721 {\n    /// Mints an ERC721 token to a specific account.\n    /// @dev Should be locked behind a permission.\n    /// @param account The account that will receive the minted token.\n    function mint(address account) external;\n}\n"
        },
        "src/IOpenmeshGenesis.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IOpenmeshGenesis {\n    error Underpaying(uint256 attached, uint256 minRequired);\n    error MintOver();\n    error NotAllowed();\n\n    error TransferReverted();\n\n    event Mint(address account, uint256 paid);\n\n    struct PricePeriod {\n        uint256 mintCount;\n        uint256 price;\n    }\n\n    /// @notice Returns the current amount of native tokens that should be attached to mint.\n    /// @dev This is dependent on the current mint count, which might change between submitting the transaction and it being confirmed.\n    function getCurrentPrice() external view returns (uint256 currentPrice);\n\n    /// @notice Returns if an account is currently allowed to public mint.\n    /// @param _account The account to check.\n    function canPublicMint(address _account) external view returns (bool allowed);\n\n    /// @notice Returns if an account is currently allowed to whitelist mint.\n    /// @param _account The account to check.\n    /// @param _proof Merkle tree whitelist proof.\n    /// @param _mintTime Mint time of the account in the merkle tree.\n    function canWhitelistMint(address _account, bytes32[] memory _proof, uint32 _mintTime)\n        external\n        view\n        returns (bool allowed);\n\n    /// @notice Perform a public mint.\n    /// @dev Every address can only mint once.\n    function publicMint() external payable;\n\n    /// @notice Perform a whitelist mint.\n    /// @param _proof Merkle tree whitelist proof.\n    /// @param _mintTime Mint time of the sender in the merkle tree.\n    /// @dev Every address can only mint once.\n    function whitelistMint(bytes32[] memory _proof, uint32 _mintTime) external payable;\n\n    /// @notice Sends all native currency stored in this contract to the Openmesh treasury.\n    /// @dev Can be called by anyone at any time. More gas efficient that sending the funds every mint.\n    function collectFunds() external;\n}\n"
        },
        "src/OpenmeshGenesis.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IOpenmeshGenesis} from \"./IOpenmeshGenesis.sol\";\nimport {IERC721Mintable} from \"../lib/validator-pass/src/IERC721Mintable.sol\";\n\nimport {MerkleProof} from \"../lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\";\n\nimport {OpenmeshENSReverseClaimable} from \"../lib/openmesh-admin/src/OpenmeshENSReverseClaimable.sol\";\n\ncontract OpenmeshGenesis is OpenmeshENSReverseClaimable, IOpenmeshGenesis {\n    mapping(address account => bool contributed) public hasContributed;\n    uint256 public mintCount;\n\n    IERC721Mintable public immutable validatorPass;\n    PricePeriod[] public pricePeriods;\n    uint32 public immutable publicMintTime;\n    bytes32 public immutable whitelistRoot;\n\n    constructor(\n        IERC721Mintable _validatorPass,\n        PricePeriod[] memory _pricePeriods,\n        uint32 _publicMintTime,\n        bytes32 _whitelistRoot\n    ) {\n        validatorPass = _validatorPass;\n        pricePeriods = _pricePeriods;\n        publicMintTime = _publicMintTime;\n        whitelistRoot = _whitelistRoot;\n    }\n\n    /// @inheritdoc IOpenmeshGenesis\n    function getCurrentPrice() public view returns (uint256 currentPrice) {\n        for (uint256 i; i < pricePeriods.length;) {\n            // Find first period with current mintCount under the period mintCount\n            if (mintCount < pricePeriods[i].mintCount) {\n                return pricePeriods[i].price;\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        revert MintOver();\n    }\n\n    /// @inheritdoc IOpenmeshGenesis\n    function canPublicMint(address _account) public view returns (bool allowed) {\n        return !hasContributed[_account] && block.timestamp > publicMintTime;\n    }\n\n    /// @inheritdoc IOpenmeshGenesis\n    function canWhitelistMint(address _account, bytes32[] memory _proof, uint32 _mintTime)\n        public\n        view\n        returns (bool allowed)\n    {\n        return !hasContributed[_account] && block.timestamp > _mintTime && _verifyWhitelist(_proof, _account, _mintTime);\n    }\n\n    /// @inheritdoc IOpenmeshGenesis\n    function publicMint() external payable {\n        if (!canPublicMint(msg.sender)) {\n            revert NotAllowed();\n        }\n\n        _mint();\n    }\n\n    /// @inheritdoc IOpenmeshGenesis\n    function whitelistMint(bytes32[] memory _proof, uint32 _mintTime) external payable {\n        if (!canWhitelistMint(msg.sender, _proof, _mintTime)) {\n            revert NotAllowed();\n        }\n\n        _mint();\n    }\n\n    /// @inheritdoc IOpenmeshGenesis\n    function collectFunds() external {\n        // Send all native currency of this contract to treasury\n        (bool success,) = OPENMESH_ADMIN.call{value: address(this).balance}(\"\");\n        if (!success) {\n            revert TransferReverted();\n        }\n    }\n\n    function _mint() internal {\n        uint256 price = getCurrentPrice();\n        if (msg.value < price) {\n            revert Underpaying(msg.value, price);\n        }\n\n        // Return any overpayment\n        uint256 refund;\n        unchecked {\n            refund = price - msg.value;\n        }\n        if (refund != 0) {\n            (bool success,) = msg.sender.call{value: refund}(\"\");\n            if (!success) {\n                revert TransferReverted();\n            }\n        }\n\n        validatorPass.mint(msg.sender);\n\n        hasContributed[msg.sender] = true;\n        emit Mint(msg.sender, msg.value);\n    }\n\n    function _verifyWhitelist(bytes32[] memory _proof, address _account, uint32 _mintTime)\n        internal\n        view\n        returns (bool valid)\n    {\n        bytes32 leaf = keccak256(bytes.concat(keccak256(abi.encode(_account, _mintTime))));\n        return MerkleProof.verify(_proof, whitelistRoot, leaf);\n    }\n}\n"
        }
      },
      "settings": {
        "remappings": [
          "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
          "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
          "ens-reverse-claimable/=lib/openmesh-admin/lib/ens-reverse-claimable/src/",
          "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
          "forge-std/=lib/forge-std/src/",
          "openmesh-admin/=lib/openmesh-admin/src/",
          "openzeppelin-contracts/=lib/openzeppelin-contracts/",
          "smart-account/=lib/openmesh-admin/lib/smart-account/src/",
          "validator-pass/=lib/validator-pass/src/"
        ],
        "optimizer": { "enabled": true, "runs": 200 },
        "evmVersion": "shanghai",
        "viaIR": true
      },
      "metadata": { "useLiteralContent": true }
    },
    "license": "MIT"
  },
  "source": "/home/plopmenz/openmesh-genesis",
  "submitted": {
    "transactionHash": "0x13c51898148702331a24ca48c9130a4cdb36960a3d6c4fff0b6b44822ee805d1",
    "date": "2024-05-07T17:22:43.083Z"
  }
}
