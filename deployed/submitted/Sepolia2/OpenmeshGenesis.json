{
  "type": "deployment",
  "id": "OpenmeshGenesis",
  "batch": "Sepolia2",
  "batchIndex": 1,
  "deploymentAddress": "0x029241a9511412CA2Db829AEB5A718Ef1DC9E80D",
  "constructorArgs": [
    "0x9f61Edd5Cad3d5A9519A7Faf893aF297ee5FBF19",
    [
      { "mintCount": "1", "price": "500000000" },
      { "mintCount": "2", "price": "1000000000" },
      { "mintCount": "3", "price": "1500000000" },
      { "mintCount": "4", "price": "2000000000" }
    ],
    1715212800,
    "0x18936852e39edc09b19c2e281ba3887e91259de233b7a47ca122d185000e6124"
  ],
  "to": "0x4e59b44847b379578588920ca78fbf26c0b4956c",
  "value": "0",
  "data": "0x0000000000000000000000000000000000000000000000004f50454e4d455348604060e08152346101d15762000b908038038061001b8161020b565b9283398101906080818303126101d1578051916001600160a01b03831683036101d1576020828101519091906001600160401b03908181116101d15784019180601f840112156101d1578251928284116101bd5761007d858560051b0161020b565b928584868152019186839660061b820101938085116101d15792908701925b8484106101d5575050505050858401519363ffffffff851685036101d157606001519460805251916801000000000000000083116101bd57600291825484845580851061015b575b5090825f52805f205f925b85841061013d5788888860a05260c0525161095f908162000231823960805181818161032601526107af015260a051818181610208015261060d015260c0518181816102ef01526107080152f35b848382816001945180518755015184860155019201930192906100ef565b60016001600160ff1b0382811683036101a957861686036101a957845f5284845f209260011b8301928760011b015b838110610199575050506100e4565b5f81555f8382015501859061018a565b634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b8a848203126101d1578a518b8101818110858211176101bd578c528451815284890151898201528252928a01929087019061009c565b6040519190601f01601f191682016001600160401b038111838210176101bd5760405256fe608060409080825260049081361015610016575f80fd5b5f3560e01c908163205b19461461046b5750806320ff430b1461036b57806326092b83146103555780632b971f1514610312578063386bfc98146102d8578063493b4ffc146102775780635b9806281461022c5780635e403472146101ec5780638da5cb5b146101be5780639261e60f146101995780639659867e1461017b578063d08b44751461011a578063eb91d37e146100f75763fddd26de146100ba575f80fd5b346100f35760203660031901126100f357356002548110156100f3576100df90610557565b506001815491015482519182526020820152f35b5f80fd5b82346100f3575f3660031901126100f357602090610113610742565b9051908152f35b5090346100f35760603660031901126100f3576101356104a4565b916024359067ffffffffffffffff82116100f357610155913691016104f0565b9160443563ffffffff811681036100f35760209361017292610632565b90519015158152f35b82346100f3575f3660031901126100f3576020906001549051908152f35b82346100f35760203660031901126100f3576020906101726101b96104a4565b6105e2565b82346100f3575f3660031901126100f3576020905173af7e68bcb2fc7295492a00177f14f59b92814e708152f35b82346100f3575f3660031901126100f3576020905163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5090346100f3575f3660031901126100f3575f8080804773af7e68bcb2fc7295492a00177f14f59b92814e705af16102626105a3565b501561026a57005b51635671523f60e11b8152fd5b5090806003193601126100f357813567ffffffffffffffff81116100f3576102a290369084016104f0565b60243563ffffffff811681036100f3576102bc9133610632565b156102cb576102c9610793565b005b51631eb49d6d60e11b8152fd5b82346100f3575f3660031901126100f357602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b82346100f3575f3660031901126100f357517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50905f3660031901126100f3576102bc336105e2565b50346100f35760603660031901126100f35780356001600160a01b03818116918290036100f35760243590811681036100f35773af7e68bcb2fc7295492a00177f14f59b92814e70330361045b57835163a9059cbb60e01b602082019081526001600160a01b039290921660248201526044803581830152815261040e915f918291906103f96064826104ba565b519082865af16104076105a3565b90836108c6565b8051908115159182610437575b505061042357005b6024925191635274afe760e01b8352820152fd5b81925090602091810103126100f357602001518015908115036100f3575f8061041b565b8351631eb49d6d60e11b81528390fd5b8390346100f35760203660031901126100f35760209160ff906001600160a01b036104946104a4565b165f525f84525f20541615158152f35b600435906001600160a01b03821682036100f357565b90601f8019910116810190811067ffffffffffffffff8211176104dc57604052565b634e487b7160e01b5f52604160045260245ffd5b81601f820112156100f35780359160209167ffffffffffffffff84116104dc578360051b9060405194610525858401876104ba565b855283808601928201019283116100f3578301905b828210610548575050505090565b8135815290830190830161053a565b60025481101561058f5760025f5260011b7f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01905f90565b634e487b7160e01b5f52603260045260245ffd5b3d156105dd573d9067ffffffffffffffff82116104dc57604051916105d2601f8201601f1916602001846104ba565b82523d5f602084013e565b606090565b6001600160a01b03165f9081526020819052604090205460ff1615806106055790565b5063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016421190565b60018060a01b031691825f5260205f815260409160ff835f205416159485610732575b85610663575b505050505090565b9091929395945063ffffffff8451928484019283521684830152838252606082019067ffffffffffffffff90838310828411176104dc5782865283519020608084019081528483529260a001908111828210176104dc578452519020905f915b855183101561070057818360051b87010151908181105f146106f1575f5281526001835f205b9201916106c3565b905f5281526001835f206106e9565b9394505050507f0000000000000000000000000000000000000000000000000000000000000000145f8080808061065b565b63ffffffff821642119550610655565b600254600180549092905f5b838110610767576040516333fb675360e21b8152600490fd5b61077081610557565b5054821061077f57840161074e565b905061078d91939250610557565b50015490565b61079b610742565b8034106108a8575f90803403610878575b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690813b156100f3575f80926024604051809581936335313c2160e11b83523360048401525af1801561086d57610852575b338082526020828152604092839020805460ff19166001179055825191825234908201527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859250a1565b5067ffffffffffffffff81116104dc5760405260405f610808565b6040513d5f823e3d90fd5b5f808080933403335af161088a6105a3565b5015610896575f6107ac565b604051635671523f60e11b8152600490fd5b6044906040519063850615e560e01b82523460048301526024820152fd5b906108ed57508051156108db57805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580610920575b6108fe575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b156108f656fea2646970667358221220a7b72e95d029fc6648133e166d189f0fff642ef83a2260656e778784d38528b764736f6c634300081700330000000000000000000000009f61edd5cad3d5a9519a7faf893af297ee5fbf19000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000663c120018936852e39edc09b19c2e281ba3887e91259de233b7a47ca122d185000e612400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000001dcd65000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000059682f0000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000077359400",
  "gas": "793790",
  "from": "0xaF7E68bCb2Fc7295492A00177f14F59B92814e70",
  "transactionSettings": {
    "chainId": 11155111,
    "nonce": "248",
    "baseFee": "21551409316",
    "priorityFee": "1000000000"
  },
  "salt": "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000OPENMESH",
  "artifact": {
    "abi": [
      {
        "type": "constructor",
        "inputs": [
          {
            "name": "_validatorPass",
            "type": "address",
            "internalType": "contract IERC721Mintable"
          },
          {
            "name": "_pricePeriods",
            "type": "tuple[]",
            "internalType": "struct IOpenmeshGenesis.PricePeriod[]",
            "components": [
              {
                "name": "mintCount",
                "type": "uint256",
                "internalType": "uint256"
              },
              { "name": "price", "type": "uint256", "internalType": "uint256" }
            ]
          },
          {
            "name": "_publicMintTime",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "_whitelistRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "canPublicMint",
        "inputs": [
          { "name": "_account", "type": "address", "internalType": "address" }
        ],
        "outputs": [
          { "name": "allowed", "type": "bool", "internalType": "bool" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "canWhitelistMint",
        "inputs": [
          { "name": "_account", "type": "address", "internalType": "address" },
          {
            "name": "_proof",
            "type": "bytes32[]",
            "internalType": "bytes32[]"
          },
          { "name": "_mintTime", "type": "uint32", "internalType": "uint32" }
        ],
        "outputs": [
          { "name": "allowed", "type": "bool", "internalType": "bool" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "collectFunds",
        "inputs": [],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "getCurrentPrice",
        "inputs": [],
        "outputs": [
          {
            "name": "currentPrice",
            "type": "uint256",
            "internalType": "uint256"
          }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "hasContributed",
        "inputs": [
          { "name": "account", "type": "address", "internalType": "address" }
        ],
        "outputs": [
          { "name": "contributed", "type": "bool", "internalType": "bool" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "mintCount",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "uint256", "internalType": "uint256" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "owner",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "address", "internalType": "address" }
        ],
        "stateMutability": "pure"
      },
      {
        "type": "function",
        "name": "pricePeriods",
        "inputs": [
          { "name": "", "type": "uint256", "internalType": "uint256" }
        ],
        "outputs": [
          { "name": "mintCount", "type": "uint256", "internalType": "uint256" },
          { "name": "price", "type": "uint256", "internalType": "uint256" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "publicMint",
        "inputs": [],
        "outputs": [],
        "stateMutability": "payable"
      },
      {
        "type": "function",
        "name": "publicMintTime",
        "inputs": [],
        "outputs": [{ "name": "", "type": "uint32", "internalType": "uint32" }],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "rescue",
        "inputs": [
          {
            "name": "_token",
            "type": "address",
            "internalType": "contract IERC20"
          },
          { "name": "_to", "type": "address", "internalType": "address" },
          { "name": "_amount", "type": "uint256", "internalType": "uint256" }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "validatorPass",
        "inputs": [],
        "outputs": [
          {
            "name": "",
            "type": "address",
            "internalType": "contract IERC721Mintable"
          }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "whitelistMint",
        "inputs": [
          {
            "name": "_proof",
            "type": "bytes32[]",
            "internalType": "bytes32[]"
          },
          { "name": "_mintTime", "type": "uint32", "internalType": "uint32" }
        ],
        "outputs": [],
        "stateMutability": "payable"
      },
      {
        "type": "function",
        "name": "whitelistRoot",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "bytes32", "internalType": "bytes32" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "event",
        "name": "Mint",
        "inputs": [
          {
            "name": "account",
            "type": "address",
            "indexed": false,
            "internalType": "address"
          },
          {
            "name": "paid",
            "type": "uint256",
            "indexed": false,
            "internalType": "uint256"
          }
        ],
        "anonymous": false
      },
      {
        "type": "error",
        "name": "AddressEmptyCode",
        "inputs": [
          { "name": "target", "type": "address", "internalType": "address" }
        ]
      },
      {
        "type": "error",
        "name": "AddressInsufficientBalance",
        "inputs": [
          { "name": "account", "type": "address", "internalType": "address" }
        ]
      },
      { "type": "error", "name": "FailedInnerCall", "inputs": [] },
      { "type": "error", "name": "MintOver", "inputs": [] },
      { "type": "error", "name": "NotAllowed", "inputs": [] },
      {
        "type": "error",
        "name": "SafeERC20FailedOperation",
        "inputs": [
          { "name": "token", "type": "address", "internalType": "address" }
        ]
      },
      { "type": "error", "name": "TransferReverted", "inputs": [] },
      {
        "type": "error",
        "name": "Underpaying",
        "inputs": [
          { "name": "attached", "type": "uint256", "internalType": "uint256" },
          {
            "name": "minRequired",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      }
    ],
    "bytecode": "0x604060e08152346101d15762000b908038038061001b8161020b565b9283398101906080818303126101d1578051916001600160a01b03831683036101d1576020828101519091906001600160401b03908181116101d15784019180601f840112156101d1578251928284116101bd5761007d858560051b0161020b565b928584868152019186839660061b820101938085116101d15792908701925b8484106101d5575050505050858401519363ffffffff851685036101d157606001519460805251916801000000000000000083116101bd57600291825484845580851061015b575b5090825f52805f205f925b85841061013d5788888860a05260c0525161095f908162000231823960805181818161032601526107af015260a051818181610208015261060d015260c0518181816102ef01526107080152f35b848382816001945180518755015184860155019201930192906100ef565b60016001600160ff1b0382811683036101a957861686036101a957845f5284845f209260011b8301928760011b015b838110610199575050506100e4565b5f81555f8382015501859061018a565b634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b8a848203126101d1578a518b8101818110858211176101bd578c528451815284890151898201528252928a01929087019061009c565b6040519190601f01601f191682016001600160401b038111838210176101bd5760405256fe608060409080825260049081361015610016575f80fd5b5f3560e01c908163205b19461461046b5750806320ff430b1461036b57806326092b83146103555780632b971f1514610312578063386bfc98146102d8578063493b4ffc146102775780635b9806281461022c5780635e403472146101ec5780638da5cb5b146101be5780639261e60f146101995780639659867e1461017b578063d08b44751461011a578063eb91d37e146100f75763fddd26de146100ba575f80fd5b346100f35760203660031901126100f357356002548110156100f3576100df90610557565b506001815491015482519182526020820152f35b5f80fd5b82346100f3575f3660031901126100f357602090610113610742565b9051908152f35b5090346100f35760603660031901126100f3576101356104a4565b916024359067ffffffffffffffff82116100f357610155913691016104f0565b9160443563ffffffff811681036100f35760209361017292610632565b90519015158152f35b82346100f3575f3660031901126100f3576020906001549051908152f35b82346100f35760203660031901126100f3576020906101726101b96104a4565b6105e2565b82346100f3575f3660031901126100f3576020905173af7e68bcb2fc7295492a00177f14f59b92814e708152f35b82346100f3575f3660031901126100f3576020905163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5090346100f3575f3660031901126100f3575f8080804773af7e68bcb2fc7295492a00177f14f59b92814e705af16102626105a3565b501561026a57005b51635671523f60e11b8152fd5b5090806003193601126100f357813567ffffffffffffffff81116100f3576102a290369084016104f0565b60243563ffffffff811681036100f3576102bc9133610632565b156102cb576102c9610793565b005b51631eb49d6d60e11b8152fd5b82346100f3575f3660031901126100f357602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b82346100f3575f3660031901126100f357517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50905f3660031901126100f3576102bc336105e2565b50346100f35760603660031901126100f35780356001600160a01b03818116918290036100f35760243590811681036100f35773af7e68bcb2fc7295492a00177f14f59b92814e70330361045b57835163a9059cbb60e01b602082019081526001600160a01b039290921660248201526044803581830152815261040e915f918291906103f96064826104ba565b519082865af16104076105a3565b90836108c6565b8051908115159182610437575b505061042357005b6024925191635274afe760e01b8352820152fd5b81925090602091810103126100f357602001518015908115036100f3575f8061041b565b8351631eb49d6d60e11b81528390fd5b8390346100f35760203660031901126100f35760209160ff906001600160a01b036104946104a4565b165f525f84525f20541615158152f35b600435906001600160a01b03821682036100f357565b90601f8019910116810190811067ffffffffffffffff8211176104dc57604052565b634e487b7160e01b5f52604160045260245ffd5b81601f820112156100f35780359160209167ffffffffffffffff84116104dc578360051b9060405194610525858401876104ba565b855283808601928201019283116100f3578301905b828210610548575050505090565b8135815290830190830161053a565b60025481101561058f5760025f5260011b7f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01905f90565b634e487b7160e01b5f52603260045260245ffd5b3d156105dd573d9067ffffffffffffffff82116104dc57604051916105d2601f8201601f1916602001846104ba565b82523d5f602084013e565b606090565b6001600160a01b03165f9081526020819052604090205460ff1615806106055790565b5063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016421190565b60018060a01b031691825f5260205f815260409160ff835f205416159485610732575b85610663575b505050505090565b9091929395945063ffffffff8451928484019283521684830152838252606082019067ffffffffffffffff90838310828411176104dc5782865283519020608084019081528483529260a001908111828210176104dc578452519020905f915b855183101561070057818360051b87010151908181105f146106f1575f5281526001835f205b9201916106c3565b905f5281526001835f206106e9565b9394505050507f0000000000000000000000000000000000000000000000000000000000000000145f8080808061065b565b63ffffffff821642119550610655565b600254600180549092905f5b838110610767576040516333fb675360e21b8152600490fd5b61077081610557565b5054821061077f57840161074e565b905061078d91939250610557565b50015490565b61079b610742565b8034106108a8575f90803403610878575b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690813b156100f3575f80926024604051809581936335313c2160e11b83523360048401525af1801561086d57610852575b338082526020828152604092839020805460ff19166001179055825191825234908201527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859250a1565b5067ffffffffffffffff81116104dc5760405260405f610808565b6040513d5f823e3d90fd5b5f808080933403335af161088a6105a3565b5015610896575f6107ac565b604051635671523f60e11b8152600490fd5b6044906040519063850615e560e01b82523460048301526024820152fd5b906108ed57508051156108db57805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580610920575b6108fe575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b156108f656fea2646970667358221220a7b72e95d029fc6648133e166d189f0fff642ef83a2260656e778784d38528b764736f6c63430008170033",
    "compiler": { "version": "v0.8.23+commit.f704f362" },
    "contractName": "src/OpenmeshGenesis.sol:OpenmeshGenesis",
    "jsonDescription": {
      "language": "Solidity",
      "sources": {
        "lib/openmesh-admin/lib/ens-reverse-claimable/src/ENSReverseClaimable.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract ENSReverseClaimable {\n    /// @notice ENS reverse name resolution is claimable by the owner of the contract.\n    function owner() external pure virtual returns (address) {\n        return 0x2309762aAcA0a8F689463a42c0A6A84BE3A7ea51; // plopmenz.eth\n    }\n}\n"
        },
        "lib/openmesh-admin/src/Openmesh.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract Openmesh {\n    address constant OPENMESH_ADMIN = 0xaF7E68bCb2Fc7295492A00177f14F59B92814e70;\n}\n"
        },
        "lib/openmesh-admin/src/OpenmeshENSReverseClaimable.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ENSReverseClaimable} from \"../lib/ens-reverse-claimable/src/ENSReverseClaimable.sol\";\nimport {Openmesh} from \"./Openmesh.sol\";\n\ncontract OpenmeshENSReverseClaimable is Openmesh, ENSReverseClaimable {\n    /// @inheritdoc ENSReverseClaimable\n    function owner() external pure override returns (address) {\n        return OPENMESH_ADMIN;\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the Merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     *@dev The multiproof provided is not valid.\n     */\n    error MerkleProofInvalidMultiproof();\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proofLen != totalHashes + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            if (proofPos != proofLen) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proofLen != totalHashes + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            if (proofPos != proofLen) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Sorts the pair (a, b) and hashes the result.\n     */\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        },
        "lib/validator-pass/src/IERC721Mintable.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IERC721Mintable is IERC721 {\n    /// Mints an ERC721 token to a specific account.\n    /// @dev Should be locked behind a permission.\n    /// @param account The account that will receive the minted token.\n    function mint(address account) external;\n}\n"
        },
        "src/IOpenmeshGenesis.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IOpenmeshGenesis {\n    error Underpaying(uint256 attached, uint256 minRequired);\n    error MintOver();\n    error NotAllowed();\n\n    error TransferReverted();\n\n    event Mint(address account, uint256 paid);\n\n    struct PricePeriod {\n        uint256 mintCount;\n        uint256 price;\n    }\n\n    /// @notice Returns the current amount of native tokens that should be attached to mint.\n    /// @dev This is dependent on the current mint count, which might change between submitting the transaction and it being confirmed.\n    function getCurrentPrice() external view returns (uint256 currentPrice);\n\n    /// @notice Returns if an account is currently allowed to public mint.\n    /// @param _account The account to check.\n    function canPublicMint(address _account) external view returns (bool allowed);\n\n    /// @notice Returns if an account is currently allowed to whitelist mint.\n    /// @param _account The account to check.\n    /// @param _proof Merkle tree whitelist proof.\n    /// @param _mintTime Mint time of the account in the merkle tree.\n    function canWhitelistMint(address _account, bytes32[] memory _proof, uint32 _mintTime)\n        external\n        view\n        returns (bool allowed);\n\n    /// @notice Perform a public mint.\n    /// @dev Every address can only mint once.\n    function publicMint() external payable;\n\n    /// @notice Perform a whitelist mint.\n    /// @param _proof Merkle tree whitelist proof.\n    /// @param _mintTime Mint time of the sender in the merkle tree.\n    /// @dev Every address can only mint once.\n    function whitelistMint(bytes32[] memory _proof, uint32 _mintTime) external payable;\n\n    /// @notice Sends all native currency stored in this contract to the Openmesh treasury.\n    /// @dev Can be called by anyone at any time. More gas efficient that sending the funds every mint.\n    function collectFunds() external;\n}\n"
        },
        "src/OpenmeshGenesis.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IOpenmeshGenesis} from \"./IOpenmeshGenesis.sol\";\nimport {IERC721Mintable} from \"../lib/validator-pass/src/IERC721Mintable.sol\";\n\nimport {MerkleProof} from \"../lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\";\nimport {IERC20, SafeERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {OpenmeshENSReverseClaimable} from \"../lib/openmesh-admin/src/OpenmeshENSReverseClaimable.sol\";\n\ncontract OpenmeshGenesis is OpenmeshENSReverseClaimable, IOpenmeshGenesis {\n    using SafeERC20 for IERC20;\n\n    mapping(address account => bool contributed) public hasContributed;\n    uint256 public mintCount;\n\n    IERC721Mintable public immutable validatorPass;\n    PricePeriod[] public pricePeriods;\n    uint32 public immutable publicMintTime;\n    bytes32 public immutable whitelistRoot;\n\n    constructor(\n        IERC721Mintable _validatorPass,\n        PricePeriod[] memory _pricePeriods,\n        uint32 _publicMintTime,\n        bytes32 _whitelistRoot\n    ) {\n        validatorPass = _validatorPass;\n        pricePeriods = _pricePeriods;\n        publicMintTime = _publicMintTime;\n        whitelistRoot = _whitelistRoot;\n    }\n\n    /// @inheritdoc IOpenmeshGenesis\n    function getCurrentPrice() public view returns (uint256 currentPrice) {\n        for (uint256 i; i < pricePeriods.length;) {\n            // Find first period with current mintCount under the period mintCount\n            if (mintCount < pricePeriods[i].mintCount) {\n                return pricePeriods[i].price;\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        revert MintOver();\n    }\n\n    /// @inheritdoc IOpenmeshGenesis\n    function canPublicMint(address _account) public view returns (bool allowed) {\n        return !hasContributed[_account] && block.timestamp > publicMintTime;\n    }\n\n    /// @inheritdoc IOpenmeshGenesis\n    function canWhitelistMint(address _account, bytes32[] memory _proof, uint32 _mintTime)\n        public\n        view\n        returns (bool allowed)\n    {\n        return !hasContributed[_account] && block.timestamp > _mintTime && _verifyWhitelist(_proof, _account, _mintTime);\n    }\n\n    /// @inheritdoc IOpenmeshGenesis\n    function publicMint() external payable {\n        if (!canPublicMint(msg.sender)) {\n            revert NotAllowed();\n        }\n\n        _mint();\n    }\n\n    /// @inheritdoc IOpenmeshGenesis\n    function whitelistMint(bytes32[] memory _proof, uint32 _mintTime) external payable {\n        if (!canWhitelistMint(msg.sender, _proof, _mintTime)) {\n            revert NotAllowed();\n        }\n\n        _mint();\n    }\n\n    /// @inheritdoc IOpenmeshGenesis\n    function collectFunds() external {\n        // Send all native currency of this contract to treasury\n        (bool success,) = OPENMESH_ADMIN.call{value: address(this).balance}(\"\");\n        if (!success) {\n            revert TransferReverted();\n        }\n    }\n\n    function _mint() internal {\n        uint256 price = getCurrentPrice();\n        if (msg.value < price) {\n            revert Underpaying(msg.value, price);\n        }\n\n        // Return any overpayment\n        uint256 refund;\n        unchecked {\n            refund = msg.value - price;\n        }\n        if (refund != 0) {\n            (bool success,) = msg.sender.call{value: refund}(\"\");\n            if (!success) {\n                revert TransferReverted();\n            }\n        }\n\n        validatorPass.mint(msg.sender);\n\n        hasContributed[msg.sender] = true;\n        emit Mint(msg.sender, msg.value);\n    }\n\n    function _verifyWhitelist(bytes32[] memory _proof, address _account, uint32 _mintTime)\n        internal\n        view\n        returns (bool valid)\n    {\n        bytes32 leaf = keccak256(bytes.concat(keccak256(abi.encode(_account, _mintTime))));\n        return MerkleProof.verify(_proof, whitelistRoot, leaf);\n    }\n\n    /// @notice To save any erc20 funds stuck in this contract\n    function rescue(IERC20 _token, address _to, uint256 _amount) external {\n        if (msg.sender != OPENMESH_ADMIN) {\n            revert NotAllowed();\n        }\n\n        _token.safeTransfer(_to, _amount);\n    }\n}\n"
        }
      },
      "settings": {
        "remappings": [
          "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
          "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
          "ens-reverse-claimable/=lib/openmesh-admin/lib/ens-reverse-claimable/src/",
          "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
          "forge-std/=lib/forge-std/src/",
          "openmesh-admin/=lib/openmesh-admin/src/",
          "openzeppelin-contracts/=lib/openzeppelin-contracts/",
          "smart-account/=lib/openmesh-admin/lib/smart-account/src/",
          "validator-pass/=lib/validator-pass/src/"
        ],
        "optimizer": { "enabled": true, "runs": 200 },
        "evmVersion": "shanghai",
        "viaIR": true
      },
      "metadata": { "useLiteralContent": true }
    },
    "license": "MIT"
  },
  "source": "/home/plopmenz/openmesh-genesis",
  "submitted": {
    "transactionHash": "0xb2d831d2d2643578c4ed8af12ae788b3ef3c1d9bd883b65f7d420d5678db6d01",
    "date": "2024-05-07T19:35:28.582Z"
  }
}
